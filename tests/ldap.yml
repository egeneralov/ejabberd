---

- name: LDAP
  hosts: ejabberd
  gather_facts: yes
  vars:
    # python_version: "2.7"
    version: v1.1.1
    glauth:
      debug: true
      ldap:
        enabled: true
        listen: '127.0.0.1:389'
      ldaps:
        enabled: false
        listen: '0.0.0.0:636'
        cert: /etc/glauth.crt
        key: /etc/glauth.key
      backend:
        datastore: config
        baseDN: 'dc=glauth,dc=com'
      users:
        - name: ejabberd
          loginShell: /bin/bash
          homeDir: /home/ejabberd
          unixid: 5001
          primarygroup: 6000
          # ejabberd
          passsha256: ac9165c81c2419a62d93dad9ece80fe861338d704c677e4717a46a15b6e7931e
        - name: admin
          loginShell: /bin/bash
          homeDir: /home/admin
          unixid: 5001
          primarygroup: 6002
          # admin
          passsha256: 8c6976e5b5410415bde908bd4dee15dfb167a9c873fc4bb8a81f6f2ab448a918
        - name: user
          loginShell: /bin/bash
          homeDir: /home/user
          unixid: 5002
          primarygroup: 6001
          # admin
          passsha256: 8c6976e5b5410415bde908bd4dee15dfb167a9c873fc4bb8a81f6f2ab448a918
      groups:
        - name: services
          unixid: 6000
        - name: users
          unixid: 6001
        - name: admins
          unixid: 6002
      api:
        enabled: false
  roles:
    - egeneralov.glauth


- name: ejabberd
  hosts: ejabberd
  gather_facts: yes
  vars:
    deployment_type: docker
    users: {}
    configuration:
      hosts:
        # - "{{ domain }}"
        - "{{ ansible_host }}"
        # - "{{ ansible_default_ipv4.address }}"
      
      loglevel: 5
      log_rotate_size: 10485760
      log_rotate_date: ""
      log_rotate_count: 1
      log_rate_limit: 100
      
      certfiles:
        - "{{ base_path }}/server.pem"
      ##  - "/etc/letsencrypt/live/localhost/fullchain.pem"
      ##  - "/etc/letsencrypt/live/localhost/privkey.pem"
      
      ca_file: "{{ base_path }}/cacert.pem"
      
      listen:
        -
          port: 5222
          ip: "::"
          module: ejabberd_c2s
          max_stanza_size: 262144
          shaper: c2s_shaper
          access: c2s
          starttls_required: true
        # -
        #   port: 5269
        #   ip: "::"
        #   module: ejabberd_s2s_in
        #   max_stanza_size: 524288
        # -
        #   port: 5443
        #   ip: "::"
        #   module: ejabberd_http
        #   tls: true
        #   request_handlers:
        #     "/admin": ejabberd_web_admin
        #     "/api": mod_http_api
        #     "/bosh": mod_bosh
        #     "/captcha": ejabberd_captcha
        #     "/upload": mod_http_upload
        #     "/ws": ejabberd_http_ws
        #     "/oauth": ejabberd_oauth
        # -
        #   port: 5280
        #   ip: "::"
        #   module: ejabberd_http
        #   request_handlers:
        #     "/admin": ejabberd_web_admin
        -
          port: 1883
          ip: "::"
          module: mod_mqtt
          backlog: 1000
      
      s2s_use_starttls: optional
      
      acl:
        local:
          user_regexp: ""
        loopback:
          ip:
            - 127.0.0.0/8
            - ::1/128
            - ::FFFF:127.0.0.1/128
        admin:
          user:
            - "admin@{{ ansible_host }}"
      
      access_rules:
        local:
          allow: local
        c2s:
          deny: blocked
          allow: all
        announce:
          allow: admin
        configure:
          allow: admin
        muc_create:
          allow: local
        pubsub_createnode:
          allow: local
        trusted_network:
          allow: loopback
      
      api_permissions:
        "console commands":
          from:
            - ejabberd_ctl
          who: all
          what: "*"
        "admin access":
          who:
            access:
              allow:
                acl: loopback
                # acl: admin
            oauth:
              scope: "ejabberd:admin"
              access:
                allow:
                  acl: loopback
                  # acl: admin
          what:
            - "*"
            - "!stop"
            - "!start"
        "public commands":
          who:
            ip: 127.0.0.1/8
          what:
            - status
            - connected_users_number
      
      shaper:
        normal: 1000
        fast: 50000
      
      shaper_rules:
        max_user_sessions: 10
        max_user_offline_messages:
          5000: admin
          100: all
        c2s_shaper:
          none: admin
          normal: all
        s2s_shaper: fast
      
      max_fsm_queue: 10000
      
      acme:
         contact: "mailto:admin@xmpp"
         ca_url: "https://acme-v01.api.letsencrypt.org"
      
      modules:
        mod_adhoc: {}
        mod_admin_extra: {}
        mod_announce:
          access: announce
        mod_avatar: {}
        mod_blocking: {}
        mod_bosh: {}
        mod_caps: {}
        mod_carboncopy: {}
        mod_client_state: {}
        mod_configure: {}
        mod_disco: {}
        mod_fail2ban: {}
        mod_http_api: {}
        mod_http_upload:
          put_url: https://@HOST@:5443/upload
        mod_last: {}
        mod_mam:
          ## Mnesia is limited to 2GB, better to use an SQL backend
          ## For small servers SQLite is a good fit and is very easy
          ## to configure. Uncomment this when you have SQL configured:
          ## db_type: sql
          assume_mam_usage: true
          default: never
        mod_mqtt: {}
        mod_muc:
          access:
            - allow
          access_admin:
            - allow: admin
          access_create: muc_create
          access_persistent: muc_create
          access_mam:
            - allow
          default_room_options:
            allow_subscription: true  # enable MucSub
            mam: false
        mod_muc_admin: {}
        mod_offline:
          access_max_user_messages: max_user_offline_messages
        mod_ping: {}
        mod_privacy: {}
        mod_private: {}
        mod_proxy65:
          access: local
          max_connections: 5
        mod_pubsub:
          access_createnode: pubsub_createnode
          plugins:
            - flat
            - pep
          force_node_config:
            ## Avoid buggy clients to make their bookmarks public
            storage:bookmarks:
              access_model: whitelist
        mod_push: {}
        mod_push_keepalive: {}
        mod_register:
          ## Only accept registration requests from the "trusted"
          ## network (see access_rules section above).
          ## Think twice before enabling registration from any
          ## address. See the Jabber SPAM Manifesto for details:
          ## https://github.com/ge0rg/jabber-spam-fighting-manifesto
          ip_access: trusted_network
        mod_roster:
          versioning: true
        mod_s2s_dialback: {}
        mod_shared_roster: {}
        mod_stream_mgmt:
          resend_on_timeout: if_offline
        mod_vcard: {}
        mod_vcard_xupdate: {}
        mod_version:
          show_os: false
    
      auth_method: ldap
      ldap_servers:
        - "127.0.0.1"
      ldap_encrypt: none
      ldap_port: 389
      ldap_rootdn: cn=ejabberd,ou=services,dc=glauth,dc=com
      ldap_password: "ejabberd"
      ldap_base: "dc=glauth,dc=com"
      ldap_uids:
        - "uid"
      # ldap_filter: "(objectclass=inetorgperson)"
  roles:
    - egeneralov.ejabberd

